using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.Networking; using UnityEngine.UI; using UnityEngine.SceneManagement; using System.Net; using System.IO; using Firebase.Auth; using System; using LitJson; using System.Threading.Tasks;     public class WWWPOST : MonoBehaviour {     private FirebaseAuth auth;     [System.Serializable]     public class SendData     {         public string name;         public int stage;         public float clearTime;         public string email;         public string mode;         public int stageIndex;         public float stageClearTime;         public string imageUrl;     }      [System.Serializable]     public class MemberData     {         public string name;         public int stage;         public float clearTime;         public int stageIndex;         public float stageClearTime;         public int saveStage;     }      readonly string URL = "https://6mur5vhowg.execute-api.us-east-1.amazonaws.com/2021-01-02/ranking";      public void Start()     {         SendData data = new SendData();                  data.name = GameObject.Find("userNameText").GetComponent<Text>().text;         data.stage = GameObject.Find("StageManager").GetComponent<StageManager>().stageNumber;         //data.clearTime = GameObject.Find("Timer").GetComponent<Timer>().PlayTime;         data.clearTime = Timer.PlayTime;          data.email = FirebaseLogin.Email;          data.mode = StageManager.mode;         data.stageIndex = GameObject.Find("StageManager").GetComponent<StageManager>().stageNumber;         //data.stageClearTime = GameObject.Find("Timer").GetComponent<Timer>().PlayTime;         data.stageClearTime = Timer.PlayTime;         data.imageUrl = FirebaseLogin.imageUrl;         //data.saveStage = GameObject.Find("GameManager").GetComponent<FirebaseLogin>().saveStage;          if (data.email != "OandOne@gmail.com")             Task.Factory.StartNew(() => {Send(data); });         //Task.Factory.StartNew(() => { Debug.Log("왜안돼");});         //StartCoroutine(Send());     }        void Send(SendData data)     {         Debug.Log("보냄");         //보낼 데이터                  Debug.Log(data.name);         Debug.Log(data.stage);         Debug.Log(data.clearTime);         Debug.Log(data.email);         Debug.Log(data.mode);         Debug.Log(data.stageIndex);         Debug.Log(data.stageClearTime);         // string,byte[]로 변환         string str = JsonUtility.ToJson(data);         var bytes = System.Text.Encoding.UTF8.GetBytes(str);          //주소와 세팅         HttpWebRequest request = (HttpWebRequest)WebRequest.Create(URL);         request.Method = "POST";         request.ContentType = "application/json";         request.ContentLength = bytes.Length;          //stream 형식으로 데이터 보내기         using (var stream = request.GetRequestStream())         {             stream.Write(bytes, 0, bytes.Length);             stream.Flush();             stream.Close();         }          //데이터를 StreamReader로 받음         HttpWebResponse response = (HttpWebResponse)request.GetResponse();         StreamReader reader = new StreamReader(response.GetResponseStream());         string json = reader.ReadToEnd();         Debug.Log(json);         if(json != "\"Sucess\"")             Task.Factory.StartNew(() => { Send(data); });         //string 값을 JsonUtility로 커스텀 클래스         //yield return null;     } } 